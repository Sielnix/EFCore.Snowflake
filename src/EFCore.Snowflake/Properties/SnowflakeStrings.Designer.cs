













// <auto-generated />

using System;
using System.Reflection;
using System.Resources;

using System.Threading;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;


#nullable enable

namespace EFCore.Snowflake.Properties
{

    /// <summary>
    ///     <para>
    ///		    String resources used in EF exceptions, etc.
    ///     </para>
    ///     <para>
    ///		    These strings are exposed publicly for use by database providers and extensions.
    ///         It is unusual for application code to need these strings.
    ///     </para>
    /// </summary>

    public static class SnowflakeStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EFCore.Snowflake.Properties.SnowflakeStrings", typeof(SnowflakeStrings).GetTypeInfo().Assembly);


        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name) ?? throw new InvalidOperationException($"Value for {name} is null");
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}


namespace EFCore.Snowflake.Properties.Internal
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class SnowflakeResources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EFCore.Snowflake.Properties.SnowflakeStrings", typeof(SnowflakeResources).GetTypeInfo().Assembly);


        /// <summary>

        ///     Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue}

        /// </summary>

        public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogFoundColumn;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogFoundColumn,
                    () => new FallbackEventDefinition(
                        logger.Options,
                        SnowflakeEventId.ColumnFound,
                        LogLevel.Debug,
                        "SnowflakeEventId.ColumnFound",
                        _resourceManager.GetString("LogFoundColumn")
                            ?? throw new InvalidOperationException($"Value for LogFoundColumn is null")));
            }

            return (FallbackEventDefinition)definition;
        }


        /// <summary>

        ///     Unable to find a schema in the database matching the selected schema {schema}. Naming is case-sensitive, most Snowflake schema names are UPPER, make sure you wrote it correctly.

        /// </summary>

        public static EventDefinition<string?> LogMissingSchema(IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogMissingSchema;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogMissingSchema,
                    () => new EventDefinition<string?>(
                        logger.Options,
                        SnowflakeEventId.MissingSchemaWarning,
                        LogLevel.Warning,
                        "SnowflakeEventId.MissingSchemaWarning",
                        level => LoggerMessage.Define<string?>(
                            level,
                            SnowflakeEventId.MissingSchemaWarning,
                            _resourceManager.GetString("LogMissingSchema")
                                ?? throw new InvalidOperationException($"Value for LogMissingSchema is null"))));
            }

            return (EventDefinition<string?>)definition;
        }


        /// <summary>

        ///     Unable to find a table in the database matching the selected table {table}. Naming is case-sensitive, most Snowflake table names are UPPER, make sure you wrote it correctly.

        /// </summary>

        public static EventDefinition<string?> LogMissingTable(IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogMissingTable;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogMissingTable,
                    () => new EventDefinition<string?>(
                        logger.Options,
                        SnowflakeEventId.MissingTableWarning,
                        LogLevel.Warning,
                        "SnowflakeEventId.MissingTableWarning",
                        level => LoggerMessage.Define<string?>(
                            level,
                            SnowflakeEventId.MissingTableWarning,
                            _resourceManager.GetString("LogMissingTable")
                                ?? throw new InvalidOperationException($"Value for LogMissingTable is null"))));
            }

            return (EventDefinition<string?>)definition;
        }


        /// <summary>

        ///     For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principalTableName}. This is usually because the principal table was not included in the selection set.

        /// </summary>

        public static EventDefinition<string?, string?, string?> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogPrincipalTableNotInSelectionSet;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.SnowflakeLoggingDefinitions)logger.Definitions).LogPrincipalTableNotInSelectionSet,
                    () => new EventDefinition<string?, string?, string?>(
                        logger.Options,
                        SnowflakeEventId.ForeignKeyReferencesMissingPrincipalTableWarning,
                        LogLevel.Warning,
                        "SnowflakeEventId.ForeignKeyReferencesMissingPrincipalTableWarning",
                        level => LoggerMessage.Define<string?, string?, string?>(
                            level,
                            SnowflakeEventId.ForeignKeyReferencesMissingPrincipalTableWarning,
                            _resourceManager.GetString("LogPrincipalTableNotInSelectionSet")
                                ?? throw new InvalidOperationException($"Value for LogPrincipalTableNotInSelectionSet is null"))));
            }

            return (EventDefinition<string?, string?, string?>)definition;
        }

    }
}


